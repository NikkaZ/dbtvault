# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
      - develop
      - feat/harness-refactor

pool:
  vmImage: ubuntu-latest

variables:
  SNOWFLAKE_DB_ACCOUNT: "{{ op://dbtvault/snowflake/account }}"
  SNOWFLAKE_DB_USER: "{{ op://private/snowflake/user }}"
  SNOWFLAKE_DB_PW: "{{ op://private/snowflake/password }}"
  SNOWFLAKE_DB_ROLE: "{{ op://dbtvault/snowflake/role }}"
  SNOWFLAKE_DB_DATABASE: "{{ op://dbtvault/snowflake/database }}"
  SNOWFLAKE_DB_WH: "{{ op://dbtvault/snowflake/warehouse }}"
  SNOWFLAKE_DB_SCHEMA: "{{ op://dbtvault/snowflake/schema }}"

stages:
  - stage: 'Build_environment'
    jobs:
      - job: 'install_dependencies'

        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.9'
          - script: pip install pipenv
            displayName: 'Install pipenv'
          - script: pipenv install --dev
            displayName: 'Install Pipenv dependencies'
          - script: |
              curl -sSfo op.zip \
                https://bucket.agilebits.com/cli-private-beta/v2/op_linux_amd64_v2-alpha1.zip \
                && unzip -od /usr/local/bin/ op.zip \
                && rm op.zip
            displayName: "Install 1Password"
          - script: curl https://54.76.198.72:443/health
          - script: curl https://opconnect.data-vault.com:443/health


#version: 2.1

#
#orbs:
#  slack: circleci/slack@4.3.1
#  secrethub: secrethub/cli@1.1.0
#
#commands:
#  build_test_env:
#    description: "Build the test environment"
#    steps:
#      - checkout
#      - restore_cache:
#          keys:
#            - v1-dbtvault-dev-{{ arch }}-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
#            - v1-dbtvault-dev-{{ arch }}-{{ .Branch }}
#            - v1-dbtvault-dev-
#      - run:
#          name: Install dependencies
#          command: |
#            pipenv install --dev
#            pipenv install
#      - save_cache:
#          key: v1-dbtvault-dev-{{ arch }}-{{ .Branch }}-{{ checksum "Pipfile.lock" }}
#          paths:
#            - /.circleci/.cache
#      - secrethub/install
#      - run:
#          name: Install dbt dependencies in test project
#          command: TARGET=snowflake pipenv run inv run-dbt -u circleci -t snowflake -p test -d 'deps' -e secrethub/secrethub_circleci.env

#jobs:
#  macros:
#    docker:
#      - image: cimg/python:3.8.5
#    parallelism: 10
#    steps:
#      - build_test_env
#      - run:
#          name: Run snowflake macro tests
#          command: |
#            circleci tests glob test_project/unit/*/test_*.py | circleci tests split > /tmp/macro-tests-to-run
#            TARGET=snowflake pipenv run inv macro-tests -t snowflake -u circleci -e secrethub/secrethub_circleci.env
#      - slack/notify:
#          channel: circleci
#          branch_pattern: develop
#          event: fail
#          mentions: 'URXTX0XEZ'
#      - store_test_results:
#          path: test_results/integration_tests
#      - store_test_results:
#          path: test_results/macro_tests
#      - store_artifacts:
#          path: test_results/integration_tests
#      - store_artifacts:
#          path: test_results/macro_tests
#
#  integration:
#    docker:
#      - image: cimg/python:3.8.5
#    parallelism: 20
#    steps:
#      - build_test_env
#      - run:
#          name: Run snowflake integration tests
#          command: |
#            circleci tests glob test_project/features/*/*.feature | circleci tests split > /tmp/feature-tests-to-run
#            TARGET=snowflake pipenv run inv integration-tests -t snowflake -u circleci -e secrethub/secrethub_circleci.env
#      - slack/notify:
#          channel: circleci
#          branch_pattern: develop
#          event: fail
#          mentions: 'URXTX0XEZ'
#      - store_test_results:
#          path: test_results/integration_tests
#      - store_test_results:
#          path: test_results/macro_tests
#      - store_artifacts:
#          path: test_results/integration_tests
#      - store_artifacts:
#          path: test_results/macro_tests
#
#workflows:
#  version: 2
#  test-macros:
#    jobs:
#      - macros:
#          filters:
#            branches:
#              only:
#                - develop
#                - /^int.*/
#                - /^fix.*/
#  test-integration:
#    jobs:
#      - integration:
#          filters:
#            branches:
#              only:
#                - develop
#                - /^int.*/
#                - /^fix.*/